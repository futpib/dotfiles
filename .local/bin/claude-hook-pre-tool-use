#!/usr/bin/env -S deno run --allow-run=systemd-cat

type EditToolInput = {
    file_path: string;
    old_string: string;
    new_string: string;
    replace_all?: boolean;
};

type MultiEditToolInput = {
    file_path: string;
    edits: Array<{
        old_string: string;
        new_string: string;
        replace_all?: boolean;
    }>;
};

type WriteToolInput = {
    file_path: string;
    content: string;
};

type BashToolInput = {
    command: string;
    description?: string;
    timeout?: number;
};

type BaseToolInput = {
    session_id: string;
    transcript_path: string;
};

type ToolInput = BaseToolInput & (
    | { tool_name: "Edit"; tool_input: EditToolInput }
    | { tool_name: "MultiEdit"; tool_input: MultiEditToolInput }
    | { tool_name: "Write"; tool_input: WriteToolInput }
    | { tool_name: "Bash"; tool_input: BashToolInput }
    | { tool_name: string; tool_input: Record<string, any> }
);

const decoder = new TextDecoder();
let input = "";

for await (const chunk of Deno.stdin.readable) {
  input += decoder.decode(chunk);
}

const toolInput = JSON.parse(input);
const toolName = toolInput.tool_name || "";
const command = toolInput.tool_input?.command || "";
const sessionId = toolInput.session_id || "";
const transcriptPath = toolInput.transcript_path || "";

// Skip logging for TodoWrite and Task
if (toolName === "TodoWrite" || toolName === "Task") {
    Deno.exit(0);
}

// Log all tool uses with systemd-cat
const logCommand = new Deno.Command("systemd-cat", {
    args: ["-t", "claude-code", "-p", "info"],
    stdin: "piped"
});

const logProcess = logCommand.spawn();
const writer = logProcess.stdin.getWriter();

function omitLongFields(input: ToolInput): ToolInput {
    if (input.tool_name === "Edit") {
        return {
            ...input,
            tool_input: {
                ...input.tool_input,
                old_string: "__OMITTED__",
                new_string: "__OMITTED__"
            }
        };
    } else if (input.tool_name === "MultiEdit") {
        return {
            ...input,
            tool_input: {
                ...input.tool_input,
                edits: "__OMITTED__"
            }
        };
    } else if (input.tool_name === "Write") {
        return {
            ...input,
            tool_input: {
                ...input.tool_input,
                content: "__OMITTED__"
            }
        };
    }
    return input;
}

const filteredInput = omitLongFields(toolInput);
let logInput = filteredInput.tool_input;

const toolInputStr = JSON.stringify(logInput);
// Only include transcript path if it doesn't contain the session ID
const transcriptInfo = transcriptPath.includes(sessionId) ? "" : `, Transcript: ${transcriptPath}`;
const logMessage = `Session: ${sessionId}${transcriptInfo}, Tool: ${toolName}, Input: ${toolInputStr}`;
await writer.write(new TextEncoder().encode(logMessage));
await writer.close();
await logProcess.status;

// Check if this is a Bash tool with git commit command that includes co-authored clause
if (toolName === "Bash" && command.toLowerCase().includes("git commit") && command.toLowerCase().includes("co-authored-by")) {
    // Check if the command includes the x-claude-code-actually-co-authored marker
    const markerPattern = /x-claude-code-actually-co-authored:\s*\d{4}/i;
    if (markerPattern.test(command)) {
        // Allow the commit - Claude Code confirmed co-authorship
        Deno.exit(0);
    } else {
        // Generate a unique 4-digit PIN
        const pin = Math.floor(1000 + Math.random() * 9000);
        console.error("⚠️  This commit includes co-authorship. Claude Code should:");
        console.error("1. Review the staged changes with 'git diff --cached -ub'");
        console.error("2. Check the session history to verify if you made these changes");
        console.error("3. If you did co-author, add the following to the end of your commit message:");
        console.error(`   x-claude-code-actually-co-authored: ${pin}`);
        console.error("4. If not, remove the Co-authored-by line and try again.");
        Deno.exit(2); // Block the commit
    }
}

// Allow all other commands
Deno.exit(0);